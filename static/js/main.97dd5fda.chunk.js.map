{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","numbers","operators","name","symbol","total","temp","prevOperator","result","clear","setState","addNumber","num","console","log","calculate","operator","Number","className","this","map","key","onClick","op","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97dd5fda.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    numbers: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \".\"],\n    operators: [\n      { name: \"equals\", symbol: \"=\" },\n      { name: \"plus\", symbol: \"+\" },\n      { name: \"minus\", symbol: \"-\" },\n      { name: \"times\", symbol: \"x\" },\n      { name: \"divide\", symbol: \"รท\" },\n      { name: \"percentage\", symbol: \"%\" }\n    ],\n    total: 0,\n    temp: \"0\",\n    prevOperator: \"\",\n    result: true,\n    clear: \"AC\"\n  };\n\n  clear = () => {\n    if (this.state.clear === \"clear\") {\n      this.setState({\n        temp: (this.state.temp = \"0\"),\n        clear: (this.state.clear = \"AC\")\n      });\n    } else if (this.state.clear === \"AC\") {\n      this.setState({\n        temp: (this.state.temp = \"0\"),\n        total: (this.state.total = 0),\n        prevOperator: (this.state.prevOperator = \"\")\n      });\n    }\n  };\n\n  addNumber = num => {\n    if (this.state.clear === \"AC\") {\n      this.setState({ clear: (this.state.clear = \"clear\") });\n    }\n    if (this.state.result === false) {\n      this.setState({ result: (this.state.result = true) });\n    }\n    if (this.state.prevOperator === \"equals\") {\n      this.setState({\n        total: (this.state.total = 0),\n        temp: (this.state.temp = \"0\"),\n        prevOperator: (this.state.prevOperator = \"\")\n      });\n    }\n    if (this.state.temp === \"0\") {\n      this.state.temp = \"\";\n      this.setState({ temp: this.state.temp + num });\n    } else {\n      this.setState({ temp: this.state.temp + num });\n    }\n    console.log(this.state.temp);\n  };\n\n  calculate = operator => {\n    if (this.state.prevOperator === \"plus\") {\n      this.setState({ total: (this.state.total += Number(this.state.temp)) });\n    } else if (this.state.prevOperator === \"minus\") {\n      this.setState({ total: (this.state.total -= Number(this.state.temp)) });\n    } else if (this.state.prevOperator === \"times\") {\n      this.setState({ total: (this.state.total *= Number(this.state.temp)) });\n    } else if (this.state.prevOperator === \"divide\") {\n      this.setState({ total: (this.state.total /= Number(this.state.temp)) });\n    } else if (this.state.prevOperator === \"\") {\n      this.setState({ total: (this.state.total += Number(this.state.temp)) });\n    }\n\n    if (operator === \"percentage\") {\n      this.setState({ total: this.state.total / 100 });\n    }\n\n    this.state.prevOperator = operator;\n    this.state.result = false;\n    this.state.temp = \"\";\n    console.log(this.state.total);\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Calculator</h1>\n        <div className=\"grid\">\n          <h1 className=\"result\">\n            {this.state.result ? this.state.temp : this.state.total}\n          </h1>\n          {this.state.numbers.map(num => {\n            return (\n              <button\n                key={num}\n                className={`number${num}`}\n                onClick={() => this.addNumber(num)}\n              >\n                {num}\n              </button>\n            );\n          })}\n          {this.state.operators.map(op => {\n            return (\n              <button\n                key={op.name}\n                className={op.name}\n                onClick={() => {\n                  this.calculate(op.name);\n                }}\n              >\n                {op.symbol}\n              </button>\n            );\n          })}\n          <button className=\"clear\" onClick={this.clear}>\n            {this.state.clear}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}